const e=process.cwd(),{NETWORK:t}=require(`${e}/constants/network.js`),a=require("fs"),i=require(`${e}/node_modules/sha1`),{createCanvas:n,loadImage:r}=require(`${e}/node_modules/canvas`),s=`${e}/build`,l=`${e}/layers`,{format:o,baseUri:p,description:d,background:m,uniqueDnaTorrance:c,layerConfigurations:g,rarityDelimiter:u,shuffleLayerConfigurations:y,debugLogs:f,extraMetadata:h,text:$,namePrefix:b,network:w,solanaMetadata:S,gif:x}=require(`${e}/src/config.js`),N=n(o.width,o.height),v=N.getContext("2d");v.imageSmoothingEnabled=o.smoothing;var E=[],_=[],j=new Set;const A=require(`${e}/modules/HashlipsGiffer.js`);let D=null;const q=e=>{let t=e.slice(0,-4);var a=Number(t.split(u).pop());return isNaN(a)&&(a=1),a},M=e=>a.readdirSync(e).filter((e=>!/(^|\/)\.[^\/\.]/g.test(e))).map(((t,a)=>{return{id:a,name:(i=t,i.slice(0,-4).split(u).shift()),filename:t,path:`${e}${t}`,weight:q(t)};var i})),k=()=>{v.fillStyle=m.static?m.default:`hsl(${Math.floor(360*Math.random())}, 100%, ${m.brightness})`,v.fillRect(0,0,o.width,o.height)},C=(e,a)=>{let n=Date.now(),r={name:`${b} #${a}`,description:d,image:`${p}/${a}.png`,dna:i(e),edition:a,date:n,...h,attributes:_,compiler:"HashLips Art Engine"};w==t.sol&&(r={name:r.name,symbol:S.symbol,description:r.description,seller_fee_basis_points:S.seller_fee_basis_points,image:`${a}.png`,external_url:S.external_url,edition:a,...h,attributes:r.attributes,properties:{files:[{uri:`${a}.png`,type:"image/png"}],category:"image",creators:S.creators}}),E.push(r),_=[]},O=async e=>new Promise((async t=>{const a=await r(`${e.selectedElement.path}`);t({layer:e,loadedImage:a})})),T=(e,t,a)=>{var i,n,r,s;v.globalAlpha=e.layer.opacity,v.globalCompositeOperation=e.layer.blend,$.only?(i=`${e.layer.name}${$.spacer}${e.layer.selectedElement.name}`,n=$.xGap,r=$.yGap*(t+1),s=$.size,v.fillStyle=$.color,v.font=`${$.weight} ${s}pt ${$.family}`,v.textBaseline=$.baseline,v.textAlign=$.align,v.fillText(i,n,r)):v.drawImage(e.loadedImage,0,0,o.width,o.height),(e=>{let t=e.layer.selectedElement;_.push({trait_type:e.layer.name,value:t.name})})(e)},I=(e="",t=[])=>t.map(((t,a)=>{let i=t.elements.find((t=>t.id==(e=>{const t=F(e);return Number(t.split(":").shift())})(e.split("|")[a])));return{name:t.name,blend:t.blend,opacity:t.opacity,selectedElement:i}})),z=e=>e.split("|").filter((e=>{const t=/(\?.*$)/.exec(e);if(!t)return!0;return t[1].split("&").reduce(((e,t)=>{const a=t.split("=");return{...e,[a[0]]:a[1]}}),[]).bypassDNA})).join("|"),F=e=>e.replace(/(\?.*$)/,""),G=(e=new Set,t="")=>{const a=z(t);return!e.has(a)},L=e=>{let t=[];return e.forEach((e=>{var a=0;e.elements.forEach((e=>{a+=e.weight}));let i=Math.floor(Math.random()*a);for(var n=0;n<e.elements.length;n++)if(i-=e.elements[n].weight,i<0)return t.push(`${e.elements[n].id}:${e.elements[n].filename}${e.bypassDNA?"?bypassDNA=true":""}`)})),t.join("|")},P=e=>{let t=E.find((t=>t.edition==e));a.writeFileSync(`${s}/json/${e}.json`,JSON.stringify(t,null,2))};module.exports={startCreating:async()=>{let e=0,i=1,n=0,r=[];for(let e=w==t.sol?0:1;e<=g[g.length-1].growEditionSizeTo;e++)r.push(e);for(y&&(r=function(e){let t,a=e.length;for(;0!=a;)t=Math.floor(Math.random()*a),a--,[e[a],e[t]]=[e[t],e[a]];return e}(r));e<g.length;){const t=g[e].layersOrder.map(((e,t)=>({id:t,elements:M(`${l}/${e.name}/`),name:null!=e.options?.displayName?e.options?.displayName:e.name,blend:null!=e.options?.blend?e.options?.blend:"source-over",opacity:null!=e.options?.opacity?e.options?.opacity:1,bypassDNA:void 0!==e.options?.bypassDNA&&e.options?.bypassDNA})));for(;i<=g[e].growEditionSizeTo;){let l=L(t);if(G(j,l)){let n=I(l,t),p=[];n.forEach((e=>{p.push(O(e))})),await Promise.all(p).then((t=>{var i;v.clearRect(0,0,o.width,o.height),x.export&&(D=new A(N,v,`${s}/gifs/${r[0]}.gif`,x.repeat,x.quality,x.delay),D.start()),m.generate&&k(),t.forEach(((t,a)=>{T(t,a,g[e].layersOrder.length),x.export&&D.add()})),x.export&&D.stop(),i=r[0],a.writeFileSync(`${s}/images/${i}.png`,N.toBuffer("image/png")),C(l,r[0]),P(r[0])})),j.add(z(l)),i++,r.shift()}else n++,n>=c&&process.exit()}e++}var p;p=JSON.stringify(E,null,2),a.writeFileSync(`${s}/json/_metadata.json`,p)},buildSetup:()=>{a.existsSync(s)&&a.rmdirSync(s,{recursive:!0}),a.mkdirSync(s),a.mkdirSync(`${s}/json`),a.mkdirSync(`${s}/images`),x.export&&a.mkdirSync(`${s}/gifs`)},getElements:M};